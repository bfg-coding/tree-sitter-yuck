==================
box test
==================

(box :orientation "h"
       :class "date"
       :halign "end")


---

(source_file
  (widget
    (reserved_widget)
    (widget_props
      (identifier)
      (string))
    (widget_props
      (identifier)
      (string))
    (widget_props
      (identifier)
      (string))))


==================
widget test
==================

(defwidget testwidget []
  (box :orientation "h"
       :class "date"
       :halign "end"))


---

 (source_file
      (defwidget
        (reserved_defs)
        (identifier)
        (widget
          (reserved_widget)
          (widget_props
            (identifier)
            (string))
          (widget_props
            (identifier)
            (string))
          (widget_props
            (identifier)
            (string)))))

==================
tempate subsitution
==================

(eventbox :class "eventbox"
          :onhover "${eww} update ${varname}=true"
          :onhoverlost "${eww} update ${varname}=false")


---

(source_file
      (widget
        (reserved_widget)
        (widget_props
          (identifier)
          (string))
        (widget_props
          (identifier)
          (string
            (template_subsitution
              (identifier))
            (template_subsitution
              (identifier))))
        (widget_props
          (identifier)
          (string
            (template_subsitution
              (identifier))
            (template_subsitution
              (identifier))))))



==================
conditional widget test
==================

(revealer :reveal var
          :transition {transition ?: "sliderright"}
          :duration {duration ?: "500ms"})


---

(source_file
      (widget
        (reserved_widget)
        (widget_props
          (identifier)
          (identifier))
        (widget_props
          (identifier)
          (conditional
            (identifier)
            (string)))
        (widget_props
          (identifier)
          (conditional
            (identifier)
            (string)))))


==================
boolean test
==================

(defwidget revealer-on-hover [var varname ?class ?duration ?transition]
  (box :class "${class} revealer-on-hover"
       :orientation "h"
       :space-evenly false))


---

(source_file
      (defwidget
        (reserved_defs)
        (identifier)
        (vars
          (identifier))
        (vars
          (identifier))
        (vars
          (identifier))
        (vars
          (identifier))
        (vars
          (identifier))
        (widget
          (reserved_widget)
          (widget_props
            (identifier)
            (string
              (template_subsitution
                (identifier))))
          (widget_props
            (identifier)
            (string))
          (widget_props
            (identifier)
            (boolean)))))

==================
child widget test
==================

(defwidget revealer-on-hover [var]
  (box :space-evenly false
    (eventbox :class "eventbox")))


---

(source_file
  (defwidget
    (reserved_defs)
    (identifier)
    (vars
      (identifier))
    (widget
      (reserved_widget)
      (widget_props
        (identifier)
        (boolean))
      (widget
        (reserved_widget)
        (widget_props
          (identifier)
          (string))))))


==================
custom widget test
==================

(defwidget revealer-on-hover [var varname ?class ?duration ?transition]
  (box :class "${class} revealer-on-hover"
       :orientation "h"
       :space-evenly false
    (eventbox :class "eventbox"
              :onhover "${eww} update ${varname}=true"
              :onhoverlost "${eww} update ${varname}=false"
      (box :space-evenly false
        (revealer :reveal var
                  :transition {transition ?: "sliderright"}
                  :duration {duration ?: "500ms"}
          (children :nth 0))
        (children :nth 1)))))


---

(source_file
      (defwidget
        (reserved_defs)
        (identifier)
        (vars
          (identifier))
        (vars
          (identifier))
        (vars
          (identifier))
        (vars
          (identifier))
        (vars
          (identifier))
        (widget
          (reserved_widget)
          (widget_props
            (identifier)
            (string
              (template_subsitution
                (identifier))))
          (widget_props
            (identifier)
            (string))
          (widget_props
            (identifier)
            (boolean))
          (widget
            (reserved_widget)
            (widget_props
              (identifier)
              (string))
            (widget_props
              (identifier)
              (string
                (template_subsitution
                  (identifier))
                (template_subsitution
                  (identifier))))
            (widget_props
              (identifier)
              (string
                (template_subsitution
                  (identifier))
                (template_subsitution
                  (identifier))))
            (widget
              (reserved_widget)
              (widget_props
                (identifier)
                (boolean))
              (widget
                (reserved_widget)
                (widget_props
                  (identifier)
                  (identifier))
                (widget_props
                  (identifier)
                  (conditional
                    (identifier)
                    (string)))
                (widget_props
                  (identifier)
                  (conditional
                    (identifier)
                    (string)))
                (widget
                  (reserved_widget)
                  (widget_props
                    (identifier)
                    (identifier))))
              (widget
                (reserved_widget)
                (widget_props
                  (identifier)
                  (identifier))))))))


==================
multi parameter for props test
==================

;; Launcher Widgets ;;
(defwidget launcher []
  (box :orientation "h"
       :space-evenly "false"
       :spacing -15
  (button :class "launcher_icon"
          :onclick "scripts/popup launcher" "ïŒƒ")))


---

(source_file
      (ERROR
        (comment))
      (defwidget
        (reserved_defs)
        (identifier)
        (widget
          (reserved_widget)
          (widget_props
            (identifier)
            (string))
          (widget_props
            (identifier)
            (string))
          (widget_props
            (identifier)
            (identifier))
          (widget
            (reserved_widget)
            (widget_props
              (identifier)
              (string))
            (widget_props
              (identifier)
              (string)
              (string))))))

==================
literal witdget test
==================

(defwidget workspaces []
  (box :class "workspaces"
    (literal :content {wm-tags})))

---

(source_file
  (defwidget
    (reserved_defs)
    (identifier)
    (widget
      (reserved_widget)
      (widget_props
        (identifier)
        (string))
      (widget
        (reserved_widget)
        (widget_props
          (identifier)
          (literal
            (identifier)))))))

==================
deflistn witdget test
==================

(deflisten wm-tags "leftwm-state -w 0 -t ~/.config/leftwm/template.liquid")

---

(source_file
  (defwidget
    (reserved_defs)
    (identifier)
    (string)))

==================
conditional body witdget test
==================

(box :class "focus-window"
     :orientation "h"
     :space-evenly true
     :halign "center"
  { window_title != "" ? "${window_title}" : "Arch-Linux" })

---

(source_file
      (widget
        (reserved_widget)
        (widget_props
          (identifier)
          (string))
        (widget_props
          (identifier)
          (string))
        (widget_props
          (identifier)
          (boolean))
        (widget_props
          (identifier)
          (string)
          (conditional
            (identifier)
            (comparison_operators)
            (string)
            (string
              (template_subsitution
                (identifier)))
            (string)))))